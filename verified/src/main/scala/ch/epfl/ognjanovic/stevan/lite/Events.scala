package ch.epfl.ognjanovic.stevan.lite

import ch.epfl.ognjanovic.stevan.types.{Height, SignedHeader}
import stainless.lang._

object Events {

  sealed abstract class Event

  case object NoEvent extends Event

  /**
   * Events produced by the environment for the lite client.
   */
  sealed abstract class InEvent extends Event

  /**
   * Event which will prompt the client to verify the header at the specified height.
   *
   * @param heightToVerify of the header we are interested in
   */
  case class Start(heightToVerify: Height) extends InEvent

  /**
   * Signed header given by the blockchain full node for a previously specified height.
   *
   * @param signedHeader of the blockchain
   */
  case class ResponseHeader(signedHeader: SignedHeader) extends InEvent

  /**
   * Events generated by the lite client.
   */
  sealed abstract class OutEvent extends Event

  /**
   * Event specifying the signed header we are intereted in.
   *
   * @param height of the header
   */
  case class RequestHeader(height: Height) extends OutEvent

  /**
   * End event of the lite client giving us the verdict.
   *
   * @param verdict true if we can trust the header and false otherwise
   */
  case class Finished(verdict: Boolean) extends OutEvent

}
